name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  set-latest-tag:
    runs-on: self-hosted
    if: github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#test')
    outputs:
      tag_changed: ${{ steps.check_tag.outputs.tag_changed }}
      latest_tag: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
    steps:
      - name: Get latest tag from GitHub API
        id: get_latest_tag
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/iv-org/invidious/releases/latest | jq -r .tag_name)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
      - name: Check if tag has changed
        id: check_tag
        run: |
          if [ "${{ vars.LATEST_TAG }}" = "${{ steps.get_latest_tag.outputs.LATEST_TAG }}" ]; then
            echo "Tag is unchanged. Skipping further steps."
            echo "tag_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Tag has changed. Updating vars."
            echo "LATEST_TAG=${{ steps.get_latest_tag.outputs.LATEST_TAG }}" >> $GITHUB_ENV
            echo "tag_changed=true" >> $GITHUB_OUTPUT
          fi

  build-arm64:
    needs: set-latest-tag
    runs-on: squidward
    if: (github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build')) && needs.set-latest-tag.outputs.tag_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PAT_TOKEN }}
      
      - name: Clone Invidious repository
        run: git clone https://github.com/iv-org/invidious.git
      
      - name: Build and push arm64 image
        uses: docker/build-push-action@v4
        with:
          context: ./invidious
          file: ./invidious/docker/Dockerfile.arm64
          platforms: linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ github.repository }}:latest-arm64
          build-args: |
            BUILDPLATFORM=linux/arm64
            NO_CACHE=true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  build-x64:
    needs: set-latest-tag
    runs-on: contabo-l
    if: (github.event_name == 'workflow_dispatch' || contains(github.event.head_commit.message, '#build')) && needs.set-latest-tag.outputs.tag_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PAT_TOKEN }}
      
      - name: Clone Invidious repository
        run: git clone https://github.com/iv-org/invidious.git
      
      - name: Build and push x64 image
        uses: docker/build-push-action@v4
        with:
          context: ./invidious
          file: ./invidious/docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest-amd64
          build-args: |
            BUILDPLATFORM=linux/amd64
            NO_CACHE=true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  update-vars:
    needs: [set-latest-tag, build-x64, build-arm64]
    runs-on: self-hosted
    if: always()
    steps:
      - name: Update LATEST_TAG in vars
        env:
          GH_TOKEN: ${{ secrets.MY_PAT_TOKEN }}
        run: |
          gh variable set LATEST_TAG --body "${{ needs.set-latest-tag.outputs.latest_tag }}"
          echo "Updated LATEST_TAG in vars to ${{ needs.set-latest-tag.outputs.latest_tag }}"