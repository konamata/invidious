name: Build and Push Docker Images

on:
  push:
    branches:
      - main
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  check-latest-tag:
    name: Check if tag has changed
    runs-on: self-hosted
    if: >-
      github.event_name == 'workflow_dispatch' || 
      contains(github.event.head_commit.message, '#build')
    outputs:
      tag_changed: ${{ steps.check_tag.outputs.tag_changed }}
      latest_tag: ${{ steps.get_latest_tag.outputs.LATEST_TAG }}
    steps:
      - name: Get latest tag from GitHub API and set as output
        id: get_latest_tag
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/iv-org/invidious/releases/latest | jq -r .tag_name)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_OUTPUT
      - name: Check if tag has changed from previous run and set as output
        id: check_tag
        run: |
          if [ "${{ vars.LATEST_TAG }}" = "${{ steps.get_latest_tag.outputs.LATEST_TAG }}" ]; then
            echo "Tag is unchanged. Skipping further steps."
            echo "tag_changed=false" >> $GITHUB_OUTPUT
          else
            echo "Tag has changed. Updating vars."
            echo "LATEST_TAG=${{ steps.get_latest_tag.outputs.LATEST_TAG }}" >> $GITHUB_ENV
            echo "tag_changed=true" >> $GITHUB_OUTPUT
          fi

  build-arm64:
    name: Build for ARM64
    needs: check-latest-tag
    runs-on: patrick
    if: >-
      (github.event_name == 'workflow_dispatch' || 
      contains(github.event.head_commit.message, '#build')) && 
      needs.check-latest-tag.outputs.tag_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PAT_TOKEN }}
      
      - name: Clone Invidious repository
        run: git clone https://github.com/iv-org/invidious.git
      
      - name: Build and push arm64 image
        uses: docker/build-push-action@v5
        with:
          context: ./invidious
          file: ./invidious/docker/Dockerfile.arm64
          platforms: linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest-arm64
            ghcr.io/${{ github.repository }}:${{ needs.check-latest-tag.outputs.latest_tag }}-arm64
          build-args: |
            BUILDPLATFORM=linux/arm64
            NO_CACHE=true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  build-x64:
    name: Build for X64
    needs: check-latest-tag
    runs-on: contabo-l
    if: >-
      (github.event_name == 'workflow_dispatch' || 
      contains(github.event.head_commit.message, '#build')) && 
      needs.check-latest-tag.outputs.tag_changed == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.MY_PAT_TOKEN }}
      
      - name: Clone Invidious repository
        run: git clone https://github.com/iv-org/invidious.git
      
      - name: Build and push x64 image
        uses: docker/build-push-action@v5
        with:
          context: ./invidious
          file: ./invidious/docker/Dockerfile
          platforms: linux/amd64
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest-amd64
            ghcr.io/${{ github.repository }}:${{ needs.check-latest-tag.outputs.latest_tag }}-amd64
          build-args: |
            BUILDPLATFORM=linux/amd64
            NO_CACHE=true
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: false

  update-latest-tag:
    name: Update LATEST_TAG in vars
    needs: [check-latest-tag, build-x64, build-arm64]
    runs-on: self-hosted
    if: >-
      needs.check-latest-tag.outputs.tag_changed == 'true' &&
      needs.build-x64.result == 'success' &&
      needs.build-arm64.result == 'success'
    steps:
      - name: Update LATEST_TAG in vars
        env:
          GH_TOKEN: ${{ secrets.MY_PAT_TOKEN }}
        run: |
          LATEST_TAG="${{ needs.check-latest-tag.outputs.latest_tag }}"
          if [ -z "$LATEST_TAG" ]; then
            echo "Error: LATEST_TAG is empty"
            exit 1
          fi
          echo "Attempting to set LATEST_TAG to: $LATEST_TAG"
          if ! gh variable set LATEST_TAG --body "$LATEST_TAG"; then
            echo "Error: Failed to set LATEST_TAG variable"
            gh variable list
            exit 1
          fi
          echo "Successfully updated LATEST_TAG in vars to $LATEST_TAG"